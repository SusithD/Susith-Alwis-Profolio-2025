name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag information
        id: tag-info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "tag-name=$TAG_NAME"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "previous-tag=$PREVIOUS_TAG"

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ steps.tag-info.outputs.tag-name }}';
            const previousTag = '${{ steps.tag-info.outputs.previous-tag }}';
            
            let changelog = '';
            
            try {
              // Get commits between tags
              const comparison = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: previousTag || 'HEAD~10', // fallback to last 10 commits if no previous tag
                head: tagName
              });
              
              const commits = comparison.data.commits;
              
              if (commits.length > 0) {
                changelog = '## What\'s Changed\n\n';
                
                commits.forEach(commit => {
                  const message = commit.commit.message.split('\n')[0];
                  const shortSha = commit.sha.substring(0, 7);
                  changelog += `- ${message} (${shortSha})\n`;
                });
                
                changelog += `\n**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...${tagName}`;
              } else {
                changelog = 'No changes found.';
              }
            } catch (error) {
              console.log('Error generating changelog:', error);
              changelog = 'Initial release or changelog generation failed.';
            }
            
            core.setOutput('changelog', changelog);

      - name: Check if pre-release
        id: prerelease
        run: |
          TAG_NAME="${{ steps.tag-info.outputs.tag-name }}"
          if [[ "$TAG_NAME" =~ -(alpha|beta|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release: $TAG_NAME"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release: $TAG_NAME"
          fi

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ steps.tag-info.outputs.tag-name }}';
            const isPrerelease = '${{ steps.prerelease.outputs.is-prerelease }}' === 'true';
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: changelog,
              draft: false,
              prerelease: isPrerelease,
              generate_release_notes: true
            });
            
            console.log(`Release created: ${release.data.html_url}`);
            core.setOutput('release-url', release.data.html_url);

      - name: Release created summary
        run: |
          echo "Release ${{ steps.tag-info.outputs.tag-name }} has been created!"
          echo "Changelog generated automatically"
          echo "Production deployment will be triggered automatically"
          echo ""
          echo "Next steps:"
          echo "1. Verify the release notes"
          echo "2. Monitor the production deployment"
          echo "3. Test the production site"