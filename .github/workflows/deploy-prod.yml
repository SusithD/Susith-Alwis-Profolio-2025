name: Deploy to S3 (production)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''
      skip_dev_check:
        description: 'Skip dev deployment verification (not recommended)'
        type: boolean
        default: false

permissions:
  contents: read
  deployments: write
  actions: read

# Prevent concurrent production deployments
concurrency:
  group: deploy-prod
  cancel-in-progress: false

jobs:
  # Verify dev deployment exists and is recent
  verify-dev-deployment:
    name: Verify dev deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_production == 'DEPLOY' && !inputs.skip_dev_check)
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check dev deployment exists
        run: |
          echo "Verifying dev deployment..."
          if aws s3api head-object --bucket "${{ secrets.S3_BUCKET_NAME }}" --key "index.html" > /dev/null 2>&1; then
            echo "Dev deployment found"
            # Get last modified date
            LAST_MODIFIED=$(aws s3api head-object --bucket "${{ secrets.S3_BUCKET_NAME }}" --key "index.html" --query 'LastModified' --output text)
            echo "Dev last updated: $LAST_MODIFIED"
            
            # Check if deployment is recent (within last 7 days)
            if [ $(date -d "$LAST_MODIFIED" +%s) -gt $(date -d "7 days ago" +%s) ]; then
              echo "Dev deployment is recent"
            else
              echo "WARNING: Dev deployment is older than 7 days - consider updating dev first"
            fi
          else
            echo "ERROR: No dev deployment found"
            echo "Please deploy to dev environment first"
            exit 1
          fi

  deploy-production:
    name: Build and deploy to production S3
    runs-on: ubuntu-latest
    needs: [verify-dev-deployment]
    if: always() && (needs.verify-dev-deployment.result == 'success' || inputs.skip_dev_check)

    steps:
      - name: Create GitHub Deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = context.sha;
            const environment = 'production';
            
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              environment: environment,
              description: github.event_name === 'release' 
                ? `Deploy release ${context.payload.release?.tag_name || 'latest'} to production`
                : 'Manual deploy to production',
              auto_merge: false,
              required_contexts: []
            });
            
            core.setOutput('deployment-id', deployment.id);
            
            // Create deployment status - in progress
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'in_progress',
              description: 'Production deployment started'
            });

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync `dist` to production S3
        run: |
          aws s3 sync dist s3://${{ secrets.S3_BUCKET_PROD_NAME }} --delete --no-progress
          # Set cache control headers
          aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_PROD_NAME }}/index.html --cache-control "no-cache, no-store, must-revalidate"
          

      - name: Production deployment summary
        run: |
          echo "Production deployment completed!"
          echo "URL: http://susith-portfolio-prod.s3-website-us-east-1.amazonaws.com"
          echo "Bucket: ${{ secrets.S3_BUCKET_PROD_NAME }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Release: ${{ github.event.release.tag_name }}"
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          echo "Please verify the site is working correctly."

      - name: Update deployment status - Success
        if: always() && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment-id }}',
              state: 'success',
              description: 'Production deployment completed successfully',
              environment_url: 'http://susith-portfolio-prod.s3-website-us-east-1.amazonaws.com'
            });

      - name: Update deployment status - Failure
        if: always() && failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: '${{ steps.create-deployment.outputs.deployment-id }}',
              state: 'failure',
              description: 'Production deployment failed'
            });