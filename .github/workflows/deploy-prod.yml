name: Deploy to S3 (production)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''
      skip_dev_check:
        description: 'Skip dev deployment verification (not recommended)'
        type: boolean
        default: false

# Prevent concurrent production deployments
concurrency:
  group: deploy-prod
  cancel-in-progress: false

jobs:
  # Verify dev deployment exists and is recent
  verify-dev-deployment:
    name: Verify dev deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_production == 'DEPLOY' && !inputs.skip_dev_check)
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check dev deployment exists
        run: |
          echo "üîç Verifying dev deployment..."
          if aws s3api head-object --bucket "${{ secrets.S3_BUCKET_NAME }}" --key "index.html" > /dev/null 2>&1; then
            echo "‚úÖ Dev deployment found"
            # Get last modified date
            LAST_MODIFIED=$(aws s3api head-object --bucket "${{ secrets.S3_BUCKET_NAME }}" --key "index.html" --query 'LastModified' --output text)
            echo "üìÖ Dev last updated: $LAST_MODIFIED"
            
            # Check if deployment is recent (within last 7 days)
            if [ $(date -d "$LAST_MODIFIED" +%s) -gt $(date -d "7 days ago" +%s) ]; then
              echo "‚úÖ Dev deployment is recent"
            else
              echo "‚ö†Ô∏è Dev deployment is older than 7 days - consider updating dev first"
            fi
          else
            echo "‚ùå No dev deployment found"
            echo "Please deploy to dev environment first"
            exit 1
          fi

  # Get CI artifact for production deployment
  get-build-artifact:
    name: Get latest CI build artifact
    runs-on: ubuntu-latest
    needs: [verify-dev-deployment]
    if: always() && (needs.verify-dev-deployment.result == 'success' || inputs.skip_dev_check)
    
    steps:
      - name: Get latest successful CI run
        id: get-ci-run
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              status: 'success',
              per_page: 1,
              branch: 'main'
            });
            
            if (runs.total_count === 0) {
              core.setFailed('No successful CI runs found on main branch');
              return;
            }
            
            const latestRun = runs.workflow_runs[0];
            console.log(`Found CI run: ${latestRun.id} from ${latestRun.head_sha}`);
            core.setOutput('run-id', latestRun.id);
            core.setOutput('commit-sha', latestRun.head_sha);

      - name: Download build artifact from CI
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ steps.get-ci-run.outputs.commit-sha }}
          path: dist
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-ci-run.outputs.run-id }}

      - name: Verify build artifact
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "‚ùå No build artifact found"
            exit 1
          fi
          echo "‚úÖ Production build artifact verified:"
          echo "üìÅ Files in dist:"
          ls -la dist/
          echo "üîó Built from commit: ${{ steps.get-ci-run.outputs.commit-sha }}"

      - name: Upload verified artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: prod-deploy-${{ github.run_id }}
          path: dist
          retention-days: 1

    outputs:
      commit-sha: ${{ steps.get-ci-run.outputs.commit-sha }}

  deploy-production:
    name: Deploy to production S3 (using CI artifact)
    runs-on: ubuntu-latest
    needs: [verify-dev-deployment, get-build-artifact]
    if: always() && needs.get-build-artifact.result == 'success'

    steps:
      - name: Download production artifact
        uses: actions/download-artifact@v4
        with:
          name: prod-deploy-${{ github.run_id }}
          path: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync `dist` to production S3
        run: |
          aws s3 sync dist s3://${{ secrets.S3_BUCKET_PROD_NAME }} --delete --no-progress
          # Set cache control headers
          aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_PROD_NAME }}/index.html --cache-control "no-cache, no-store, must-revalidate"
          

      - name: Production deployment summary
        run: |
          echo "üöÄ Production deployment completed!"
          echo "üåê URL: http://susith-portfolio-prod.s3-website-us-east-1.amazonaws.com"
          echo "üì¶ Bucket: ${{ secrets.S3_BUCKET_PROD_NAME }}"
          echo "üîó Built from commit: ${{ needs.get-build-artifact.outputs.commit-sha }}"
          echo "üöÄ Deployed by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "üè∑Ô∏è  Release: ${{ github.event.release.tag_name }}"
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Please verify the site is working correctly."